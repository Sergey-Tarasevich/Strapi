{"version":3,"sources":["pages/Homepage.js","pages/ReviewDetails.js","pages/Category.js","components/Header.js","App.js","index.js"],"names":["REVIEWS","gql","Homepage","useQuery","loading","error","data","component","reviews","map","review","className","rating","title","categories","c","name","id","body","substring","to","REVIEW","ReviewDetails","useParams","variables","CATEGORY","Category","category","CATEGORIES","Header","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","exact","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7056824.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\n// import useFetch from \"../hooks/useFetch\"\r\nimport { useQuery, gql } from \"@apollo/client\"\r\n\r\nconst REVIEWS = gql`\r\n  query GetReviews {\r\n    reviews {\r\n      title\r\n      body\r\n      rating\r\n      id\r\n      categories {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default function Homepage() {\r\n  // work with useFetch hook\r\n  // const { loading, error, data } = useFetch(\"http://localhost:1337/reviews\")\r\n\r\n  // work with graphql hook\r\n  const { loading, error, data } = useQuery(REVIEWS)\r\n\r\n  if (loading)\r\n    return (\r\n      <div component=\"p\">\r\n        <h2>Loading...</h2>\r\n      </div>\r\n    )\r\n  if (error)\r\n    return (\r\n      <div component=\"p\">\r\n        <h2>UPS :( ERROR</h2>\r\n      </div>\r\n    )\r\n\r\n  // console.log(data)\r\n\r\n  return (\r\n    <div>\r\n      {/* use this block if you work with graphql */}\r\n\r\n      {data.reviews.map((review) => (\r\n        <div key={review.id} className=\"review-card\">\r\n          <div className=\"rating\">{review.rating}</div>\r\n          <h2>{review.title}</h2>\r\n          {/* <img src=\"/uploads/IMG_9262_0939b6eff2.JPG\" /> */}\r\n\r\n          {review.categories.map((c) => (\r\n            <small key={c.id}>{c.name}</small>\r\n          ))}\r\n\r\n          <p>{review.body.substring(0, 200)}...</p>\r\n          <Link to={`/details/${review.id}`}>Read more...</Link>\r\n        </div>\r\n      ))}\r\n\r\n      {/* finish graphql block */}\r\n\r\n      {/* use this block if you work with useFetch */}\r\n\r\n      {/* {data.map((review) => (\r\n        <div key={review.id} className=\"review-card\">\r\n          <div className=\"rating\">{review.rating}</div>\r\n          <h2>{review.title}</h2>\r\n\r\n          <small>console list</small>\r\n\r\n          <p>{review.body.substring(0, 300)}...</p>\r\n          <Link to={`/details/${review.id}`}>Read more...</Link>\r\n        </div>\r\n      ))} */}\r\n\r\n      {/* finish useFetch block */}\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport ReactMarkdown from \"react-markdown\"\r\n// import useFetch from \"../hooks/useFetch\"\r\n\r\nimport { useQuery, gql } from \"@apollo/client\"\r\n\r\nconst REVIEW = gql`\r\n  query GetReview($id: ID!) {\r\n    review(id: $id) {\r\n      title\r\n      body\r\n      rating\r\n      id\r\n      categories {\r\n        name\r\n        id\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default function ReviewDetails() {\r\n  // use 'id' because path=\"/details/:id\" in App.js\r\n  const { id } = useParams()\r\n\r\n  // work with useFetch hook\r\n  // const { loading, error, data } = useFetch(\r\n  //   \"http://localhost:1337/reviews/\" + id\r\n  // )\r\n\r\n  // work with graphql hook\r\n  const { loading, error, data } = useQuery(REVIEW, {\r\n    variables: { id: id },\r\n  })\r\n\r\n  if (loading)\r\n    return (\r\n      <div>\r\n        <h2>Loading...</h2>\r\n      </div>\r\n    )\r\n  if (error)\r\n    return (\r\n      <div>\r\n        <h2>UPS :( ERROR</h2>\r\n      </div>\r\n    )\r\n\r\n  // console.log(data)\r\n\r\n  return (\r\n    <div className=\"review-card\">\r\n      {/* use this block if you work with graphql */}\r\n      <div className=\"rating\">{data.review.rating}</div>\r\n      <h2>{data.review.title}</h2>\r\n\r\n      {data.review.categories.map((c) => (\r\n        <small key={c.id}>{c.name}</small>\r\n      ))}\r\n\r\n      <ReactMarkdown>{data.review.body}</ReactMarkdown>\r\n\r\n      {/* finish graphql block */}\r\n\r\n      {/* use this block if you work with useFetch */}\r\n      {/* <div className=\"rating\">{data.rating}</div>\r\n      <h2>{data.title}</h2>\r\n\r\n      <small>console list</small>\r\n\r\n      <p>{data.body}</p> */}\r\n      {/* finish useFetch block */}\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { useQuery, gql } from \"@apollo/client\"\r\nimport { useParams, Link } from \"react-router-dom\"\r\n\r\nconst CATEGORY = gql`\r\n  query GetCategory($id: ID!) {\r\n    category(id: $id) {\r\n      name\r\n      id\r\n      reviews {\r\n        title\r\n        body\r\n        rating\r\n        id\r\n        categories {\r\n          name\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default function Category() {\r\n  const { id } = useParams()\r\n  const { loading, error, data } = useQuery(CATEGORY, {\r\n    variables: { id: id },\r\n  })\r\n\r\n  if (loading)\r\n    return (\r\n      <div>\r\n        <h2>Loading...</h2>\r\n      </div>\r\n    )\r\n  if (error)\r\n    return (\r\n      <div>\r\n        <h2>UPS :( ERROR</h2>\r\n      </div>\r\n    )\r\n\r\n  // console.log(data)\r\n\r\n  return (\r\n    <div>\r\n      <h2>{data.category.name} </h2>\r\n      {data.category.reviews.map((review) => (\r\n        <div key={review.id} className=\"review-card\">\r\n          <div className=\"rating\">{review.rating}</div>\r\n          <h2>{review.title}</h2>\r\n\r\n          {review.categories.map((c) => (\r\n            <small key={c.id}>{c.name}</small>\r\n          ))}\r\n\r\n          <p>{review.body.substring(0, 200)}...</p>\r\n          <Link to={`/details/${review.id}`}>Read more</Link>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { useQuery, gql } from \"@apollo/client\"\r\n\r\nconst CATEGORIES = gql`\r\n  query GetCategories {\r\n    categories {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nexport default function Header() {\r\n  const { loading, error, data } = useQuery(CATEGORIES)\r\n\r\n  if (loading)\r\n    return (\r\n      <div>\r\n        <h2>Loading...</h2>\r\n      </div>\r\n    )\r\n  if (error)\r\n    return (\r\n      <div>\r\n        <h2>UPS :( ERROR</h2>\r\n      </div>\r\n    )\r\n\r\n  return (\r\n    <div className=\"site-header\">\r\n      <Link to=\"/\">\r\n        <h1>Cats & dogs</h1>\r\n      </Link>\r\n\r\n      <nav className=\"categories\">\r\n        <span>Filter reviews by animal:</span>\r\n        {data.categories.map((category) => (\r\n          <Link key={category.id} to={`/category/${category.id}`}>\r\n            {category.name}\r\n          </Link>\r\n        ))}\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n","import { BrowserRouter as Router, Route, Routes } from \"react-router-dom\"\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\"\n\n// page & layout imports\nimport Homepage from \"./pages/Homepage\"\nimport ReviewDetails from \"./pages/ReviewDetails\"\nimport Category from \"./pages/Category\"\nimport Header from \"./components/Header\"\n\n// apollo client\nconst client = new ApolloClient({\n  uri: \"http://localhost:1337/graphql\",\n  cache: new InMemoryCache(),\n})\n\nfunction App() {\n  return (\n    <Router>\n      <ApolloProvider client={client}>\n        <div className=\"App\">\n          <Header />\n          <Routes>\n            {/* need 'exact' because other route matches from homepage '/' */}\n            <Route exact path=\"/\" element={<Homepage />} />\n\n            <Route path=\"/details/:id\" element={<ReviewDetails />} />\n\n            <Route path=\"/category/:id\" element={<Category />} />\n          </Routes>\n        </div>\n      </ApolloProvider>\n    </Router>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}